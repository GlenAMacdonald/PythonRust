use pyo3::prelude::*;
use std::collections::HashMap;

// Note that pyO3 doesn't like generic types, so lets be explicit
pub struct PersistentMap {
    map: HashMap<String, String>
}

impl PersistentMap {
    fn new() -> PersistentMap {
        PersistentMap {map: HashMap::new()}
    }

    fn add1(&mut self){
        self.map.insert("1".to_string(), "Value".to_string());
    }

    fn get(&self, key: String) -> String {
        return self.map.get(&key).unwrap().clone();
    }
}

/// Formats the sum of two numbers as string.
#[pyfunction]
fn sum_as_string(a: usize, b: usize) -> PyResult<String> {
    Ok((a + b).to_string())
}

/// A Python module implemented in Rust.
#[pymodule]
fn string_map(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;
    Ok(())
}

#[cfg(test)]
mod tests{
    use super::*;

    #[test]
    fn test_new(){
        let mut a = PersistentMap::new();
        a.add1();
        assert_eq!(a.get("1".to_string()),"Value");
    }
}